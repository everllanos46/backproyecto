// <auto-generated />
using Datos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Datos.Migrations
{
    [DbContext(typeof(ConsultorioContext))]
    partial class ConsultorioContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entidad.Cita", b =>
                {
                    b.Property<int>("CodigoCita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fecha")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hora")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PacienteCodigoPaciente")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PsicologoCodigoPsicologo")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CodigoCita");

                    b.HasIndex("PacienteCodigoPaciente");

                    b.HasIndex("PsicologoCodigoPsicologo");

                    b.ToTable("citas");
                });

            modelBuilder.Entity("Entidad.Historial", b =>
                {
                    b.Property<int>("CodigoHistorial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PacienteCodigoPaciente")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CodigoHistorial");

                    b.HasIndex("PacienteCodigoPaciente");

                    b.ToTable("historiales");
                });

            modelBuilder.Entity("Entidad.Medicamento", b =>
                {
                    b.Property<string>("CodigoMedicamento")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Instrucciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodigoMedicamento");

                    b.ToTable("medicamentos");
                });

            modelBuilder.Entity("Entidad.Paciente", b =>
                {
                    b.Property<string>("CodigoPaciente")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PersonaIdentification")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CodigoPaciente");

                    b.HasIndex("PersonaIdentification");

                    b.ToTable("pacientes");
                });

            modelBuilder.Entity("Entidad.Persona", b =>
                {
                    b.Property<string>("Identification")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usuario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Identification");

                    b.ToTable("personas");
                });

            modelBuilder.Entity("Entidad.Psicologo", b =>
                {
                    b.Property<string>("CodigoPsicologo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PersonaIdentification")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Salario")
                        .HasColumnType("float");

                    b.HasKey("CodigoPsicologo");

                    b.HasIndex("PersonaIdentification");

                    b.ToTable("psicologos");
                });

            modelBuilder.Entity("Entidad.Tratamiento", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Diagnostico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recomendacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Codigo");

                    b.ToTable("tratamientos");
                });

            modelBuilder.Entity("Entidad.Cita", b =>
                {
                    b.HasOne("Entidad.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteCodigoPaciente");

                    b.HasOne("Entidad.Psicologo", "Psicologo")
                        .WithMany()
                        .HasForeignKey("PsicologoCodigoPsicologo");

                    b.Navigation("Paciente");

                    b.Navigation("Psicologo");
                });

            modelBuilder.Entity("Entidad.Historial", b =>
                {
                    b.HasOne("Entidad.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteCodigoPaciente");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Entidad.Paciente", b =>
                {
                    b.HasOne("Entidad.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaIdentification");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Entidad.Psicologo", b =>
                {
                    b.HasOne("Entidad.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaIdentification");

                    b.Navigation("Persona");
                });
#pragma warning restore 612, 618
        }
    }
}
